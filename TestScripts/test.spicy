fn forEach(ls, f) {
  for (var i = 0; i < len(ls); i++) {
    f(ls[i]);
  }
}

fn map(ls, f) {
  var ret = [];
  for (var i = 0; i < len(ls); i = i + 1) {
    ret <- f(ls[i]);
  }
  return ret;
}

fn map2(ls1, ls2, f) {
  var ret = [];
  if (len(ls1) != len(ls2)) {
    return ret;
  }
  for (var i = 0; i < len(ls1); i = i + 1) {
    ret <- f(ls1[i], ls2[i]);
  }
  return ret;
}

fn filter(ls, f) {
  var ret = [];
  for (var i = 0; i < len(ls); i = i + 1) {
    if (f(ls[i])) {
      ret <- ls[i];
    }
  }
  return ret;
}

fn fold(ls, acc, f) {
  for (var i = 0; i < len(ls); i = i + 1) {
    acc = f(ls[i], acc);
  }
  return acc;
}

fn thing(x) {
  print twice(x);
}

fn makeMult(mult) -> \(val) -> mult * val;

fn twice(number) -> number * 2;

fn sum(lst) -> fold(lst, 0, \(x, s) -> x + s);

var test_list = [];
test_list <- 1 <- 2 <- 3 <- 4 <- 5;

print test_list;
var multipliers = map(test_list, makeMult);

var dbl = \(lst) -> map(lst, twice);

var test_list_doubled = dbl(test_list);
var mult_list = map2(multipliers, test_list_doubled, \(f, x) -> f(x));

print test_list_doubled;
print mult_list;

forEach(test_list_doubled, thing);

print sum(test_list_doubled);

