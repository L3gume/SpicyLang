
fun buildList(n) {
    var ls = [];
    for (var i = 0; i < n; i = i+1) {
        ls <- i;
    }
    return ls;
}

fun fib(n) {
    if (n == 0 or n == 1) {
        return n;
    }
    var a = 0;
    var b = 1;
    for (var i = 2; i < n; i = i + 1) {
        var c = a + b;
        a = b;
        b = c;
    }
    return a + b;    
}

fun mapCpy(ls, fn) {
    var ret = [];
    for (var i = 0; i < len(ls); i = i + 1) {
        ret <- fn(ls[i]);
    }
    return ret;
}

fun map(ls, fn) {
    for (var i = 0; i < len(ls); i = i + 1) {
        ls[i] = fn(ls[i]);
    }
}

fun filter(ls, fn) {
    var ret = [];
    for (var i = 0; i < len(ls); i = i + 1) {
        if (fn(ls[i])) {
            ret <- ls[i];
        }
    }
    return ret;
}

var lst = [] <- 1 <- 2 <- 3 <- 4 <- 5;
var twice = fun(x){return x*2;};
print lst;
map(lst, twice);
print lst;

//print mapCpy(buildList(10), fib);
//print filter(buildList(20), fun (x) { return x > 10; });